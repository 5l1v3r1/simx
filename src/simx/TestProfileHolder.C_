//-------------------------------------------------------------------------
// $Id: TestProfileHolder.C,v 1.6 2006/07/28 19:38:45 gam Exp $
//-------------------------------------------------------------------------
// File:    TestProfileHolder.C
// Module:  simx
// Author:  Lukas Kroc
// Created: Apr 7 2005
// Description:
// 	Implements unit tests of ProfileHolder
//
// @@COPYRIGHT@@
//
//-------------------------------------------------------------------------

#include "simx/TestProfileHolder.h"

#include "Common/Values.h"
#include "Config/Configuration.h"
#include "Global/main.h"
#include "Log/Logger.h"

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------

namespace simx {

  CPPUNIT_TEST_SUITE_REGISTRATION( TestProfileHolder );

  TestProfileHolder::TestProfileHolder()
  {
  }

  //-------------------------------------------------------------------------

  void TestProfileHolder::testNonexistent()
  {
    /// try to get an non-existent key

    int v;
    bool res = fProfile.get("NONEXISTENT", v);
	
    CPPUNIT_ASSERT( res == false );
  }

  //-------------------------------------------------------------------------

  void TestProfileHolder::testWrongType()
  {
    /// try to get a key with a wrong type
    
    fProfile.add("WRONG",std::string("tmp"));

    int v;
    bool res = fProfile.get("WRONG", v);
	
    CPPUNIT_ASSERT( res == false );
  }

  //-------------------------------------------------------------------------

  void TestProfileHolder::testBasicType()
  {
    bool res;
    /// create a new profile with a tuple string, and try to get it back
    fProfile.add("K1",std::string("(1 2 3)"));
    boost::tuple<int,int,int> v1;
    res = fProfile.get("K1",v1);
	
    CPPUNIT_ASSERT( res == true );
    CPPUNIT_ASSERT( v1 == boost::make_tuple(1,2,3) );

    // try string
    fProfile.add("K2",std::string("string with whitespace") );
    std::string v2;
    res = fProfile.get("K2",v2);
    
    CPPUNIT_ASSERT( res == true );
    CPPUNIT_ASSERT( v2 == "string with whitespace" );
	
  }

  //-------------------------------------------------------------------------

  void TestProfileHolder::testContainerType()
  {
    /// create a new profile with a vector of tuples string, and try to get it back
    fProfile.add("K1",std::string(" [ (1 2 3) (4 5 6) ] "));
	
    std::vector< boost::tuple<int,int,int> > v1;
	
    bool res = fProfile.get("K1",v1);
	
    CPPUNIT_ASSERT( res == true );
    CPPUNIT_ASSERT( v1.size() == 2 );
    CPPUNIT_ASSERT( v1[0] == boost::make_tuple(1,2,3) );
    CPPUNIT_ASSERT( v1[1] == boost::make_tuple(4,5,6) );
	
  }

  //-------------------------------------------------------------------------

} // namespace


/// THIS IS HERE TO BYPASS DaSSF

int tmp()
{
  int argc = 0;
  char *argv[1] = { "" };

  Config::ConfigInit("/dev/null");
  Log::sInitLog(Common::Values::gRank(),
		Common::Values::gRankSuffix());


  Global::ModuleMain(argc,argv);
    
  abort();
}

bool x = tmp();

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------

