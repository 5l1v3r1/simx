Obtaining SimX
==============
The latest working version of SimX can be downloaded from the 
SimX GitHub page at
http://github.com/sim-x/simx

You can download SimX  sources as a zip file, or check it out via 
anonymous git using the following  command

git clone http://github.com/sim-x/simx.git

SimX Requirements
=================

Most of Simx is written in C++ and will have to be built from source. 
The SimX build system uses CMake for determining platform specific 
configuration parameters. In addition to a C++ compiler and Python (>=2.4 ) 
you will need the following packages installed prior to building SimX

- CMake (>=2.6)
- Boost C++ library ( >= 1.35)
- MPI (required for parallel simulations. See below for building without MPI)

SimX also uses a Python package called greenlets for process oriented 
simulations; this will be automatically installed while building SimX.

Using Simx
==========

To build and use SimX without installing it, change to the source root
and type

cmake .
make
source SimX.rc

Installing SimX
===============

To build and install SimX, change to the source root directory and type

cmake . 
make install

This will build SimX and install it to the appropriate Python site-packages
directory.

If you do not have write permissions to the system Python directories,  try:

cmake -DCMAKE_INSTALL_PREFIX=$HOME .
make install

This will build and install SimX under the user's home directory. Python
2.6 or higher is required for user mode installation.

MPI Support
-----------

By default, SimX expects a working MPI installation to be present
on your system since  MPI is required for parallel simulations. If you do not have
MPI or, for some reason, do not wish to enable parallel simulations, type

cmake -DSIMX_USE_MPI=OFF .
make install


Other Options
-------------

By default SimX is built with the bundled SSF library 
(www.primessf.net/minissf) for message passing and synchronization. 
SimX can also be built with its own native message passing library.

For this, do the following:

cmake -DSIMX_USE_PRIME=OFF .
make install

This alternative build requires MPI; it also requires that your MPI installation 
be fully multi-threaded (on the otherhand, SSF can run on both single and 
multi-threaded MPI). Depending on your computational setup and simulation needs, 
one or the other might perform better.  

Note: If disabling MPI, SimX will use SSF.


Using SimX
==========

See examples/HelloWorld for a simple python simulation application that uses SimX.
